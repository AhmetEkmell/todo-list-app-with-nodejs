<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= pageTitle %></title>

    <style>
      body {
        font-family: "Courier New", Courier, monospace;
        background-color: black;
        color: #fff;
        margin: 0;
        padding: 0 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100vh;
      }

      ::-webkit-scrollbar {
        width: 8px;
        background-color: black;
        border-top: 1px solid orange;
        border-bottom: 1px solid orange;
        border-radius: 7px;
      }

      ::-webkit-scrollbar-thumb {
        background-color: orange;
        border-radius: 7px;
        transition: 0.5s;
      }

      ::-webkit-scrollbar-thumb:hover {
        background-color: white;
      }

      .content {
        max-width: 1000px;
        height: 600px;
        border: 1px solid orange;
        border-radius: 7px;
        overflow-y: auto;
        padding: 20px;
      }

      form {
        display: flex;
        flex-direction: column;
        gap: 10px;
      }

      .form-data-entry {
        display: flex;
        gap: 10px;
      }

      #saveBtn {
        width: 100px;
        background-color: orange;
        color: black;
      }

      #saveBtn:hover {
        background-color: white;
        color: red;
      }

      #editBtn {
        background-color: blue;
        color: white;
        padding: 7px;
      }

      #deleteBtn {
        background-color: red;
        color: white;
        padding: 7px;
      }

      .btn {
        cursor: pointer;
        border: none;
        border-radius: 2px;
        transition: 0.2s ease-in;
        font-weight: bolder;
      }

      .btn:hover {
        transform: translateY(-2px);
      }

      .btn:active {
        transform: translateY(0);
      }

      #title {
        flex: 1;
      }

      .input {
        border: none;
        background-color: white;
        color: black;
        transition: 0.2s;
        border-radius: 2px;
        padding: 10px;
        outline: none;
      }

      .input::placeholder {
        color: grey;
      }

      .input:focus {
        border: none !important;
        background-color: orange;
        color: black;
      }

      .list {
        max-width: 680px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        gap: 10px;
        margin-top: 10px;
      }

      .list-item {
        border: 1px solid grey;
        border-radius: 2px;
        padding: 10px;
        display: flex;
        align-items: center;
        gap: 30px;
        transition: 0.2s;
        width: 97%;
      }

      .list-item .task {
        flex: 1;
      }

      .list-item .btn-group {
        display: flex;
        flex-direction: column;
        gap: 10px;
      }

      .list-item .task h3 {
        margin: 0;
        color: orangered;
      }

      .list-item .task .taskDescription {
        padding-left: 10px;
        font-size: 14px;
      }

      .list-item .task .showTwoRowDescription {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 3;
        overflow: hidden;
        text-overflow: ellipsis;
      }

      .list-item .task .showAllRowDescription {
        display: block;
        overflow: visible;
        -webkit-line-clamp: unset;
      }

      .toggleButton {
        display: none;
        text-decoration: underline;
        background: transparent;
        color: orange;
        border: none;
        cursor: pointer;
        transition: 0.2s;
      }

      .toggleButtonVisible {
        display: block;
      }

      .toggleButton:hover {
        color: white;
      }

      .list-item .task h3 span {
        border-bottom: 1px dashed grey;
      }

      .list-item:hover {
        background-color: rgb(71, 71, 71);
      }
    </style>
  </head>

  <body>
    <div class="content">
      <form id="form" action="/tasks/postOne" method="post">
        <div class="form-data-entry">
          <input
            tabindex="1"
            type="text"
            name="title"
            id="title"
            class="input"
            placeholder="Başlık giriniz.."
          />
          <button tabindex="3" id="saveBtn" class="btn">Kaydet</button>
        </div>
        <textarea
          tabindex="2"
          name="description"
          id="description"
          class="input"
          placeholder="Açıklama giriniz.."
          rows="3"
        ></textarea>
      </form>

      <div class="list">
        <% if (data.length> 0) { for (let task of data) { %>

        <div class="list-item">
          <div class="task">
            <h3><span><%= task.TITLE %></span></h3>
            <p class="taskDescription showTwoRowDescription">
              <%= task.DESCRIPTION %>
            </p>
            <button
              class="toggleButton <%= task.DESCRIPTION.length > 100 ? 'toggleButtonVisible' : '' %>"
            >
              Daha Fazla Göster..
            </button>
          </div>
          <div class="btn-group">
            <button
              id="editBtn"
              class="btn"
              onclick="updateTask('<%= JSON.stringify(task) %>')"
            >
              Düzenle
            </button>
            <button
              id="deleteBtn"
              class="btn"
              onclick="deleteTask('<%= task.ID %>')"
            >
              Sil
            </button>
          </div>
        </div>

        <% }} else { %>

        <p class="empty-list">Liste Boş!</p>

        <% } %>
      </div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const toggleBtns = document.querySelectorAll(".toggleButtonVisible");

        toggleBtns.forEach((toggleBtn) => {
          toggleBtn.addEventListener("click", function () {
            const parent = this.closest(".task");
            const taskDescription = parent.querySelector(".taskDescription");

            if (taskDescription.classList.contains("showTwoRowDescription")) {
              taskDescription.classList.remove("showTwoRowDescription");
              taskDescription.classList.add("showAllRowDescription");
              this.textContent = "Daha Az Göster";
            } else {
              taskDescription.classList.remove("showAllRowDescription");
              taskDescription.classList.add("showTwoRowDescription");
              this.textContent = "Daha Fazla Göster";
            }
          });
        });
      });

      async function deleteTask(taskId) {
        const deleteConfirm = confirm(
          "Bu liste elemanını silmek istediğinize emin misiniz?"
        );

        if (deleteConfirm) {
          try {
            await fetch(`/tasks/deleteOne/${taskId}`, { method: "DELETE" });
            location.reload();
          } catch (error) {
            alert(error?.message || "İşlem Gerçekleştirilemedi!");
          }
        }
      }

      async function handleFormSubmit(event, taskId) {
        event.preventDefault();

        const inputTitle = document.getElementById("title");
        const inputDescription = document.getElementById("description");

        const requestBody = {
          ID: taskId,
          TITLE: inputTitle.value,
          DESCRIPTION: inputDescription.value,
        };

        try {
          await fetch(`/tasks/putOne/${taskId}`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(requestBody),
          });

          location.reload();
        } catch (error) {
          alert(error?.message || "Güncelleme işlemi gerçekleştirilemedi!");
        }
      }

      function updateTask(task) {
        const form = document.getElementById("form");
        const inputTitle = document.getElementById("title");
        const inputDescription = document.getElementById("description");

        if (inputTitle.value || inputDescription.value) {
          return;
        }

        const { ID: taskId, TITLE, DESCRIPTION } = JSON.parse(task);

        inputTitle.value = TITLE;
        inputDescription.value = DESCRIPTION;

        form.addEventListener("submit", (e) => handleFormSubmit(e, taskId), {
          once: true,
        });
      }
    </script>
  </body>
</html>
